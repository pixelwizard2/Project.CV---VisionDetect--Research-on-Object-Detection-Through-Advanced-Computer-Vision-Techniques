# 사고 실험 2. (웹캠에서 움직이는 객체를 검출해내고, 간단한 배경 차분을 추가한 전체 코드 /  면적이 2000 픽셀보다 작은 객체는 무시)
import cv2
import numpy as np
# 웹캠 초기화
cap = cv2.VideoCapture(0)
_, frame1 = cap.read()
_, frame2 = cap.read()
colors = [(0, 0, 255), (0, 165, 255), (0, 255, 255), (0, 255, 0), (255, 0, 0), (130, 0, 75), (238, 130, 238)]

# 전체화면으로 창 설정
cv2.namedWindow("feed", cv2.WND_PROP_FULLSCREEN)
cv2.setWindowProperty("feed", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

while True:
    # 배경 차분으로 움직임 감지
    diff = cv2.absdiff(frame1, frame2)
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    _, thresh = cv2.threshold(blur, 20, 255, cv2.THRESH_BINARY)
    dilated = cv2.dilate(thresh, None, iterations=3)
    contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)
    # 수정 부분1 : 감지된 영역을 면적 기준으로 2000 이상인것에서 7개만으로 조정
    contours = [contour for contour in sorted(contours, key=cv2.contourArea, reverse=True) if cv2.contourArea(contour) >= 2000][:7]
    for i, contour in enumerate(contours):
        # 사각형 그리기
        (x, y, w, h) = cv2.boundingRect(contour)
        cv2.rectangle(frame1, (x, y), (x+w, y+h), colors[i], 2)
        #cv2.putText(frame1, f"Object{i+1}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, colors[i], 2)
        cv2.putText(frame1, f"Object{i+1}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, colors[i % len(colors)], 2)
    cv2.imshow("feed", frame1)
    frame1 = frame2
    _, frame2 = cap.read()
    # 수정 부분2 : 키보드의 q를 선택하면 화면 종료하도록 함
    if cv2.waitKey(1) == ord('q'):
        break
cv2.destroyAllWindows()
cap.release()



## 주석 추가

import cv2
import numpy as np

# 웹캠 초기화
cap = cv2.VideoCapture(0)
# 첫 두 프레임 읽기
_, frame1 = cap.read()
_, frame2 = cap.read()

# 그리기에 사용될 색상들 정의
colors = [(0, 0, 255), (0, 165, 255), (0, 255, 255), (0, 255, 0), (255, 0, 0), (130, 0, 75), (238, 130, 238)]

# 전체화면으로 창 설정
cv2.namedWindow("feed", cv2.WND_PROP_FULLSCREEN)
cv2.setWindowProperty("feed", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

while True:
    # 두 프레임 간의 차이를 계산하여 움직임 감지
    diff = cv2.absdiff(frame1, frame2)
    # 차이 이미지를 회색조로 변환
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    # 회색조 이미지를 블러 처리하여 노이즈 제거
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    # 블러 처리한 이미지를 이진화하여 명확한 경계 생성
    _, thresh = cv2.threshold(blur, 20, 255, cv2.THRESH_BINARY)
    # 이진화 이미지를 팽창시켜 작은 구멍 채우기
    dilated = cv2.dilate(thresh, None, iterations=3)
    # 윤곽선 찾기
    contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # 수정 부분1: 면적이 2000 픽셀 이상인 윤곽선만 선택
    contours = [contour for contour in sorted(contours, key=cv2.contourArea, reverse=True) if cv2.contourArea(contour) >= 2000][:7]

    for i, contour in enumerate(contours):
        # 각 윤곽선에 대한 경계 사각형 계산
        (x, y, w, h) = cv2.boundingRect(contour)
        # 사각형 그리기
        cv2.rectangle(frame1, (x, y), (x+w, y+h), colors[i % len(colors)], 2)
        # 객체 번호 텍스트 추가
        cv2.putText(frame1, f"Object{i+1}", (x, y-10), cv2.FONT_HERSHEY_SIMPLEX, 0.5, colors[i % len(colors)], 2)

    # 결과 표시
    cv2.imshow("feed", frame1)
    # 다음 루프를 위해 프레임 업데이트
    frame1 = frame2
    _, frame2 = cap.read()

    # 'q' 키가 눌리면 종료
    if cv2.waitKey(1) == ord('q'):
        break

# 자원 해제
cv2.destroyAllWindows()
cap.release()



# 이 이전 프로토타입 화면 버전

import cv2
import numpy as np

# 웹캠 초기화
cap = cv2.VideoCapture(0)

_, frame1 = cap.read()
_, frame2 = cap.read()

# 사용할 색상들 정의
colors = [(0, 0, 255), (0, 165, 255), (0, 255, 255), (0, 255, 0), (255, 0, 0), (130, 0, 75), (238, 130, 238)]

# 전체화면으로 창 설정
cv2.namedWindow("feed", cv2.WND_PROP_FULLSCREEN)
cv2.setWindowProperty("feed", cv2.WND_PROP_FULLSCREEN, cv2.WINDOW_FULLSCREEN)

while True:
    # 두 프레임 간의 차이를 계산하여 움직임 감지
    diff = cv2.absdiff(frame1, frame2)
    # 차이 이미지를 회색조로 변환
    gray = cv2.cvtColor(diff, cv2.COLOR_BGR2GRAY)
    # 회색조 이미지를 블러 처리하여 노이즈 제거
    blur = cv2.GaussianBlur(gray, (5, 5), 0)
    # 블러 처리한 이미지를 이진화하여 명확한 경계 생성
    _, thresh = cv2.threshold(blur, 20, 255, cv2.THRESH_BINARY)
    # 이진화 이미지를 팽창시켜 작은 구멍 채우기
    dilated = cv2.dilate(thresh, None, iterations=3)
    # 윤곽선 찾기
    contours, _ = cv2.findContours(dilated, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    for i, contour in enumerate(contours):
        # 각 윤곽선에 대한 경계 사각형 계산
        (x, y, w, h) = cv2.boundingRect(contour)
        # 사각형 그리기 (선 두께를 1로 설정하여 얇게 만듦)
        cv2.rectangle(frame1, (x, y), (x+w, y+h), colors[i % len(colors)], 1)

    # 결과 표시
    cv2.imshow("feed", frame1)
    # 다음 루프를 위해 프레임 업데이트
    frame1 = frame2
    _, frame2 = cap.read()

    # 'q' 키가 눌리면 종료
    if cv2.waitKey(1) == ord('q'):
        break

# 자원 해제
cv2.destroyAllWindows()
cap.release()

